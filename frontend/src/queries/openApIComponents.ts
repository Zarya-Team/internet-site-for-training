/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
import * as reactQuery from "@tanstack/react-query";
import { useOpenApIContext, OpenApIContext } from "./openApIContext";
import type * as Fetcher from "./openApIFetcher";
import { openApIFetch } from "./openApIFetcher";
import type * as Schemas from "./openApISchemas";

export type CountriesGetAllCountriesGetError = Fetcher.ErrorWrapper<undefined>;

export type CountriesGetAllCountriesGetResponse = Schemas.CountriesSchema[];

export type CountriesGetAllCountriesGetVariables =
  OpenApIContext["fetcherOptions"];

export const fetchCountriesGetAllCountriesGet = (
  variables: CountriesGetAllCountriesGetVariables,
  signal?: AbortSignal
) =>
  openApIFetch<
    CountriesGetAllCountriesGetResponse,
    CountriesGetAllCountriesGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/countries", method: "get", ...variables, signal });

export const useCountriesGetAllCountriesGet = <
  TData = CountriesGetAllCountriesGetResponse
>(
  variables: CountriesGetAllCountriesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CountriesGetAllCountriesGetResponse,
      CountriesGetAllCountriesGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApIContext(options);
  return reactQuery.useQuery<
    CountriesGetAllCountriesGetResponse,
    CountriesGetAllCountriesGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/countries",
      operationId: "countriesGetAllCountriesGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCountriesGetAllCountriesGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions,
  });
};

export type CountriesRecipesGetAllCountriesRecipesGetQueryParams = {
  countries_id: number;
  /**
   * Номер страницы, стандартно 1
   *
   * @default 1
   */
  page?: number;
  /**
   * Количество выгружаемных рецептов, стандартно 5
   *
   * @default 5
   */
  per_page?: number;
};

export type CountriesRecipesGetAllCountriesRecipesGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CountriesRecipesGetAllCountriesRecipesGetResponse =
  Schemas.RecipesSchema[];

export type CountriesRecipesGetAllCountriesRecipesGetVariables = {
  queryParams: CountriesRecipesGetAllCountriesRecipesGetQueryParams;
} & OpenApIContext["fetcherOptions"];

export const fetchCountriesRecipesGetAllCountriesRecipesGet = (
  variables: CountriesRecipesGetAllCountriesRecipesGetVariables,
  signal?: AbortSignal
) =>
  openApIFetch<
    CountriesRecipesGetAllCountriesRecipesGetResponse,
    CountriesRecipesGetAllCountriesRecipesGetError,
    undefined,
    {},
    CountriesRecipesGetAllCountriesRecipesGetQueryParams,
    {}
  >({ url: "/countries_recipes", method: "get", ...variables, signal });

export const useCountriesRecipesGetAllCountriesRecipesGet = <
  TData = CountriesRecipesGetAllCountriesRecipesGetResponse
>(
  variables: CountriesRecipesGetAllCountriesRecipesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CountriesRecipesGetAllCountriesRecipesGetResponse,
      CountriesRecipesGetAllCountriesRecipesGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApIContext(options);
  return reactQuery.useQuery<
    CountriesRecipesGetAllCountriesRecipesGetResponse,
    CountriesRecipesGetAllCountriesRecipesGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/countries_recipes",
      operationId: "countriesRecipesGetAllCountriesRecipesGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCountriesRecipesGetAllCountriesRecipesGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions,
  });
};

export type CategoriesRecipesGetAllCategoriesRecipesGetQueryParams = {
  categories_id: number;
  /**
   * Номер страницы, стандартно 1
   *
   * @default 1
   */
  page?: number;
  /**
   * Количество выгружаемных рецептов, стандартно 5
   *
   * @default 5
   */
  per_page?: number;
};

export type CategoriesRecipesGetAllCategoriesRecipesGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CategoriesRecipesGetAllCategoriesRecipesGetResponse =
  Schemas.RecipesSchema[];

export type CategoriesRecipesGetAllCategoriesRecipesGetVariables = {
  queryParams: CategoriesRecipesGetAllCategoriesRecipesGetQueryParams;
} & OpenApIContext["fetcherOptions"];

export const fetchCategoriesRecipesGetAllCategoriesRecipesGet = (
  variables: CategoriesRecipesGetAllCategoriesRecipesGetVariables,
  signal?: AbortSignal
) =>
  openApIFetch<
    CategoriesRecipesGetAllCategoriesRecipesGetResponse,
    CategoriesRecipesGetAllCategoriesRecipesGetError,
    undefined,
    {},
    CategoriesRecipesGetAllCategoriesRecipesGetQueryParams,
    {}
  >({ url: "/categories_recipes", method: "get", ...variables, signal });

export const useCategoriesRecipesGetAllCategoriesRecipesGet = <
  TData = CategoriesRecipesGetAllCategoriesRecipesGetResponse
>(
  variables: CategoriesRecipesGetAllCategoriesRecipesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CategoriesRecipesGetAllCategoriesRecipesGetResponse,
      CategoriesRecipesGetAllCategoriesRecipesGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApIContext(options);
  return reactQuery.useQuery<
    CategoriesRecipesGetAllCategoriesRecipesGetResponse,
    CategoriesRecipesGetAllCategoriesRecipesGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/categories_recipes",
      operationId: "categoriesRecipesGetAllCategoriesRecipesGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCategoriesRecipesGetAllCategoriesRecipesGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions,
  });
};

export type сategoriesGetAllCategoriesGetError =
  Fetcher.ErrorWrapper<undefined>;

export type сategoriesGetAllCategoriesGetResponse = Schemas.CategoriesSchema[];

export type сategoriesGetAllCategoriesGetVariables =
  OpenApIContext["fetcherOptions"];

export const fetchсategoriesGetAllCategoriesGet = (
  variables: сategoriesGetAllCategoriesGetVariables,
  signal?: AbortSignal
) =>
  openApIFetch<
    сategoriesGetAllCategoriesGetResponse,
    сategoriesGetAllCategoriesGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/categories", method: "get", ...variables, signal });

export const useCategoriesAllCategoriesGet = <
  TData = сategoriesGetAllCategoriesGetResponse
>(
  variables: сategoriesGetAllCategoriesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      сategoriesGetAllCategoriesGetResponse,
      сategoriesGetAllCategoriesGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApIContext(options);
  return reactQuery.useQuery<
    сategoriesGetAllCategoriesGetResponse,
    сategoriesGetAllCategoriesGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/categories",
      operationId: "\u0441ategoriesGetAllCategoriesGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchсategoriesGetAllCategoriesGet(
        { ...fetcherOptions, ...variables },
        signal
      ),
    ...options,
    ...queryOptions,
  });
};

export type RecipeGetRecipeGetQueryParams = {
  recipe_id: number;
};

export type RecipeGetRecipeGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type RecipeGetRecipeGetVariables = {
  queryParams: RecipeGetRecipeGetQueryParams;
} & OpenApIContext["fetcherOptions"];

export const fetchRecipeGetRecipeGet = (
  variables: RecipeGetRecipeGetVariables,
  signal?: AbortSignal
) =>
  openApIFetch<
    Schemas.RecipeIngredientsSchema,
    RecipeGetRecipeGetError,
    undefined,
    {},
    RecipeGetRecipeGetQueryParams,
    {}
  >({ url: "/recipe", method: "get", ...variables, signal });

export const useRecipeGetRecipeGet = <TData = Schemas.RecipeIngredientsSchema>(
  variables: RecipeGetRecipeGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RecipeIngredientsSchema,
      RecipeGetRecipeGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useOpenApIContext(options);
  return reactQuery.useQuery<
    Schemas.RecipeIngredientsSchema,
    RecipeGetRecipeGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/recipe",
      operationId: "recipeGetRecipeGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRecipeGetRecipeGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/countries";
      operationId: "countriesGetAllCountriesGet";
      variables: CountriesGetAllCountriesGetVariables;
    }
  | {
      path: "/countries_recipes";
      operationId: "countriesRecipesGetAllCountriesRecipesGet";
      variables: CountriesRecipesGetAllCountriesRecipesGetVariables;
    }
  | {
      path: "/categories_recipes";
      operationId: "categoriesRecipesGetAllCategoriesRecipesGet";
      variables: CategoriesRecipesGetAllCategoriesRecipesGetVariables;
    }
  | {
      path: "/categories";
      operationId: "\u0441ategoriesGetAllCategoriesGet";
      variables: сategoriesGetAllCategoriesGetVariables;
    }
  | {
      path: "/recipe";
      operationId: "recipeGetRecipeGet";
      variables: RecipeGetRecipeGetVariables;
    };
